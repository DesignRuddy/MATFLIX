/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2023-06-06 12:53:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class payment4_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>views 폴더 안에 payment.jsp 소스 코딩</title>\r\n");
      out.write("<!-- https://portone.gitbook.io/docs/sdk/javascript-sdk-old -->\r\n");
      out.write("<!-- jQuery -->\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-1.12.4.min.js\" ></script>\r\n");
      out.write("<!-- iamport.payment.js -->\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://cdn.iamport.kr/js/iamport.payment-1.2.0.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("function fn_buy() {\r\n");
      out.write("\tvar IMP = window.IMP;\r\n");
      out.write("\t<!-- https://github.com/iamport/iamport-manual/blob/master/인증결제/README.md#pc-mobile -->\r\n");
      out.write("\tIMP.init('imp08681661'); //portone 대신 자신의 \"가맹점 식별코드\"를 사용하시면 됩니다\r\n");
      out.write("\t// IMP.request_pay(param, callback) 결제창 호출\r\n");
      out.write("\tIMP.request_pay({\r\n");
      out.write("\t\tpg: 'html5_inicis',\r\n");
      out.write("\t\tpay_method: 'card',\r\n");
      out.write("\t\tmerchant_uid : 'merchant_' + new Date().getTime(),\r\n");
      out.write("\t\tname : '결제테스트',\r\n");
      out.write("\t\tamount : 199000,\r\n");
      out.write("\t\tbuyer_email : 'romikiju1@gmail.com',\r\n");
      out.write("\t\tbuyer_name : '장나라',\r\n");
      out.write("\t\tbuyer_tel : '010-1234-5678',\r\n");
      out.write("\t\tbuyer_addr : '서울특별시 강남구 삼성동',\r\n");
      out.write("\t\tbuyer_postcode : '123-456',\r\n");
      out.write("\t\tm_redirect_url : '/paymentDone.do'\r\n");
      out.write("\t}, function(rsp) {  // callback\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif ( rsp.success ) {\r\n");
      out.write("\t\t\tvar paymentInfo = {\r\n");
      out.write("\t\t\t\timp_uid : rsp.imp_uid,\r\n");
      out.write("\t\t\t\tmerchant_uid : rsp.merchant_uid,\r\n");
      out.write("\t\t\t\tpaid_amount : rsp.paid_amount,\r\n");
      out.write("\t\t\t\tapply_num : rsp.apply_num,\r\n");
      out.write("\t\t\t\tpaid_at : new Date()\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl : \"/paymentProcess.do\",\r\n");
      out.write("\t\t\tmethod : \"post\",\r\n");
      out.write("\t\t\tcontentType : \"application/json\",\r\n");
      out.write("\t\t\tdata : JSON.stringify(paymentInfo),\r\n");
      out.write("\t\t\tsuccess:function(data, textStatus){\r\n");
      out.write("\t\t\t\tconsole.log(paymentInfo);\r\n");
      out.write("\t\t\t\tlocation.href = \"/paymentDone.do\";\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror : function(e) {\r\n");
      out.write("\t\t\t\tconsole.log(e);\r\n");
      out.write("\t\t\t}\t\t\t\r\n");
      out.write("\t\t});\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\talert(\"결제 실패 : \" + rsp.error_msg)\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\t\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<button type=\"button\" onclick=\"fn_buy()\">결제하기</button>\r\n");
      out.write("\t<br><br>\r\n");
      out.write("\t<a href=\"goMain.do\">[처음으로]</a>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
